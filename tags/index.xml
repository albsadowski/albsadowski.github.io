<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tags on albert's blog</title><link>https://albsadowski.github.io/tags/</link><description>Recent content in Tags on albert's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://albsadowski.github.io/tags/index.xml" rel="self" type="application/rss+xml"/><item><title>On Making AI Reasoning Transparent</title><link>https://albsadowski.github.io/on-making-ai-reasoning-transparent/</link><pubDate>Sat, 20 Sep 2025 21:29:33 +0000</pubDate><guid>https://albsadowski.github.io/on-making-ai-reasoning-transparent/</guid><description>&lt;p&gt;LLMs give you answers but hide how they got there. Ask &lt;em&gt;ChatGPT&lt;/em&gt; about a legal question and you get a conclusion with what looks like solid reasoning. Chain-of-Thought prompting has made this even better - models now show their step-by-step thinking in natural language. But that reasoning is still embedded in free-form text. You can read through the explanation, but you can&amp;rsquo;t really verify each logical step independently. The reasoning path is there, but it&amp;rsquo;s not structured in a way that lets you examine specific components.&lt;/p&gt;
&lt;p&gt;This matters in domains where explaining your reasoning is crucial. A lawyer needs to justify their argument to a judge. A doctor explains their diagnosis to colleagues. But current AI systems, even with improved reasoning capabilities, don&amp;rsquo;t provide the kind of structured, verifiable reasoning paths that high-stakes decisions require.&lt;/p&gt;
&lt;p&gt;I kept wondering: what if I explicitly separated language understanding from logical reasoning? Instead of asking one model to do everything at once - interpret text, extract meaning, apply rules, and generate explanations - what if I broke it down into distinct, verifiable steps?&lt;/p&gt;
&lt;p&gt;I tried splitting legal reasoning into three parts. First, &lt;strong&gt;entity identification&lt;/strong&gt;: extract the relevant pieces from messy text. What are the key people, events, statements mentioned? This step converts unstructured language into structured data points. Second, &lt;strong&gt;property extraction&lt;/strong&gt;: figure out what relationships and attributes apply to those entities. Is this statement made in court or out of court? Who said what to whom? What&amp;rsquo;s the context and purpose? Third, &lt;strong&gt;symbolic rule application&lt;/strong&gt;: use formal logic to apply the legal rules deterministically. No more pattern matching or implicit reasoning - just explicit logical evaluation that can be verified.&lt;/p&gt;
&lt;p&gt;Each step produces explicit outputs you can examine independently. If something goes wrong, you can pinpoint exactly where the breakdown occurred.&lt;/p&gt;
&lt;p&gt;I picked hearsay determination to test this approach - a specific legal task about whether evidence is admissible. The rule seems straightforward but requires nuanced reasoning about statements, context, and purpose. Take this example:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Martin smiled and nodded when asked if he did so by an officer on the scene.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;In the &lt;em&gt;first step&lt;/em&gt;, the system identifies Martin as a person, the smile and nod as communicative conduct, and the officer interaction as the context. It extracts these as discrete entities with explanations for each identification.&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;second step&lt;/em&gt; determines the properties and relationships: this happened out of court, the conduct was assertive (intended to communicate), and it implies Martin acknowledged doing something specific. Each property gets mapped to the identified entities with justification.&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;third step&lt;/em&gt; applies formal logic using an SMT solver: &lt;em&gt;out-of-court statement&lt;/em&gt; + &lt;em&gt;offered to prove the truth of what was asserted&lt;/em&gt; = hearsay. The logic is deterministic and transparent.&lt;/p&gt;
&lt;p&gt;Instead of getting one long explanation mixing interpretation with reasoning, I get structured outputs at each stage. A legal expert can verify: did the system correctly identify the relevant statement? Did it properly classify the context and relationships? Is the final logical application sound?&lt;/p&gt;
&lt;p&gt;The results were encouraging. On hearsay cases (&lt;em&gt;LegalBench&lt;/em&gt;), this approach achieved 92.9% accuracy (F1) on &lt;em&gt;o1&lt;/em&gt; compared to 71.4% with standard prompting. More interesting was the transparency. When the system made mistakes, I could trace exactly where things went wrong. Sometimes it misidentified entities, sometimes it missed crucial relationships, sometimes the logical rules had gaps.&lt;/p&gt;
&lt;p&gt;This was just one experiment in one narrow domain. The approach feels brittle in practice - it requires careful prompt engineering and works much better with some models than others. The OpenAI o-family models showed substantial improvements, while others struggled.&lt;/p&gt;
&lt;p&gt;But it points toward something useful: maybe building explainable AI systems isn&amp;rsquo;t about solving the entire black box problem at once. Maybe it&amp;rsquo;s about creating explicit inspection points where humans can verify reasoning components step by step. The three-step framework is just one way to think about decomposition, but it suggests we can build AI systems that show their work systematically, not just provide post-hoc explanations.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re interested in the technical details and experimental results, the full paper is &lt;a href="https://arxiv.org/abs/2506.16335"&gt;available here&lt;/a&gt;.&lt;/p&gt;</description></item><item><title>Preserving Form State with React's useActionState Hook</title><link>https://albsadowski.github.io/preserving-form-state-with-reacts-useactionstate-hook/</link><pubDate>Sat, 01 Mar 2025 00:00:00 +0000</pubDate><guid>https://albsadowski.github.io/preserving-form-state-with-reacts-useactionstate-hook/</guid><description>&lt;p&gt;React recently introduced the &lt;a href="https://react.dev/reference/react/useActionState"&gt;&lt;code&gt;useActionState&lt;/code&gt;&lt;/a&gt; hook, and while the official docs provide basic examples, I immediately wanted to tackle a common real-world scenario: preserving form input values after submission errors.&lt;/p&gt;
&lt;h2 id="the-problem"&gt;The Problem&lt;/h2&gt;
&lt;p&gt;When a user submits a form with invalid credentials, we typically want to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Show an error message&lt;/li&gt;
&lt;li&gt;Preserve what they&amp;rsquo;ve already typed (especially for multi-field forms)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Without this, users face the frustration of re-typing information they&amp;rsquo;ve already entered.&lt;/p&gt;
&lt;h2 id="traditional-approach"&gt;Traditional Approach&lt;/h2&gt;
&lt;p&gt;The traditional approach requires maintaining controlled components with &lt;code&gt;onChange&lt;/code&gt; handlers:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-jsx" data-lang="jsx"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;function&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;SignInForm&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; [&lt;span style="color:#a6e22e"&gt;email&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;setEmail&lt;/span&gt;] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;useState&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; [&lt;span style="color:#a6e22e"&gt;password&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;setPassword&lt;/span&gt;] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;useState&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; [&lt;span style="color:#a6e22e"&gt;error&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;setError&lt;/span&gt;] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;useState&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;null&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;handleSubmit&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;async&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;e&lt;/span&gt;) =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;e&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;preventDefault&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;try&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;await&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;signIn&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;email&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;password&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; } &lt;span style="color:#66d9ef"&gt;catch&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;setError&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;Invalid credentials&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &amp;lt;&lt;span style="color:#f92672"&gt;form&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;onSubmit&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;{&lt;span style="color:#a6e22e"&gt;handleSubmit&lt;/span&gt;}&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {&lt;span style="color:#a6e22e"&gt;error&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &amp;lt;&lt;span style="color:#f92672"&gt;div&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;className&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;error&amp;#34;&lt;/span&gt;&amp;gt;{&lt;span style="color:#a6e22e"&gt;error&lt;/span&gt;}&amp;lt;/&lt;span style="color:#f92672"&gt;div&lt;/span&gt;&amp;gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &amp;lt;&lt;span style="color:#f92672"&gt;input&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;type&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;email&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;value&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;{&lt;span style="color:#a6e22e"&gt;email&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;onChange&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;{(&lt;span style="color:#a6e22e"&gt;e&lt;/span&gt;) =&amp;gt; &lt;span style="color:#a6e22e"&gt;setEmail&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;e&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;target&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;value&lt;/span&gt;)}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; /&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &amp;lt;&lt;span style="color:#f92672"&gt;input&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;type&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;password&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;value&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;{&lt;span style="color:#a6e22e"&gt;password&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;onChange&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;{(&lt;span style="color:#a6e22e"&gt;e&lt;/span&gt;) =&amp;gt; &lt;span style="color:#a6e22e"&gt;setPassword&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;e&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;target&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;value&lt;/span&gt;)}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; /&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &amp;lt;&lt;span style="color:#f92672"&gt;button&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;type&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;submit&amp;#34;&lt;/span&gt;&amp;gt;&lt;span style="color:#a6e22e"&gt;Sign&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;In&lt;/span&gt;&amp;lt;/&lt;span style="color:#f92672"&gt;button&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &amp;lt;/&lt;span style="color:#f92672"&gt;form&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; )
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="the-useactionstate-approach"&gt;The &lt;code&gt;useActionState&lt;/code&gt; Approach&lt;/h2&gt;
&lt;p&gt;With &lt;code&gt;useActionState&lt;/code&gt;, we can achieve the same result with less code and without tracking intermediate states:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-js" data-lang="js"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;use server&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;async&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;function&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;signInAction&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;prevState&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;formData&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;email&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;formData&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;get&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;email&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;password&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;formData&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;get&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;password&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;try&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;await&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;signIn&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;email&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;password&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; { &lt;span style="color:#a6e22e"&gt;success&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; } &lt;span style="color:#66d9ef"&gt;catch&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;error&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;email&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;error&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;Invalid credentials&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-jsx" data-lang="jsx"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;import&lt;/span&gt; { &lt;span style="color:#a6e22e"&gt;useActionState&lt;/span&gt; } &lt;span style="color:#a6e22e"&gt;from&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;react&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;function&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;SignInForm&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; [&lt;span style="color:#a6e22e"&gt;state&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;formAction&lt;/span&gt;] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;useActionState&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;signInAction&lt;/span&gt;, {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// initial state
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; })
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;state&lt;/span&gt;&lt;span style="color:#f92672"&gt;?&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;success&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &amp;lt;&lt;span style="color:#f92672"&gt;div&lt;/span&gt;&amp;gt;&lt;span style="color:#a6e22e"&gt;You&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;re signed in!&amp;lt;/div&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; return (
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; &amp;lt;form action={formAction}&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; {state?.error &amp;amp;&amp;amp; &amp;lt;div className=&amp;#34;error&amp;#34;&amp;gt;{state.error}&amp;lt;/div&amp;gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; &amp;lt;input
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; type=&amp;#34;email&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; name=&amp;#34;email&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; defaultValue={state?.email || &amp;#39;&lt;/span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;&amp;#39;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;required&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &amp;lt;&lt;span style="color:#f92672"&gt;input&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;type&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;password&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;name&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;password&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;required&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; /&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &amp;lt;&lt;span style="color:#f92672"&gt;button&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;type&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;submit&amp;#34;&lt;/span&gt;&amp;gt;&lt;span style="color:#a6e22e"&gt;Sign&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;In&lt;/span&gt;&amp;lt;/&lt;span style="color:#f92672"&gt;button&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &amp;lt;/&lt;span style="color:#f92672"&gt;form&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; )
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The key part is to set the &lt;em&gt;defaultValue&lt;/em&gt; on the &lt;em&gt;input&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;In particular, I&amp;rsquo;m a fan on letting the native components do its job. Historically, React (or people using React) used to track every piece of state - think of the state of &lt;em&gt;input&lt;/em&gt;, kept in &lt;em&gt;state&lt;/em&gt; and tracked with &lt;em&gt;onChange&lt;/em&gt;. I&amp;rsquo;m happy with the paradigm shift.&lt;/p&gt;</description></item><item><title>Typed Configuration Object in TypeScript</title><link>https://albsadowski.github.io/typed-configuration-object-in-typescript/</link><pubDate>Sun, 16 Jul 2023 00:00:00 +0000</pubDate><guid>https://albsadowski.github.io/typed-configuration-object-in-typescript/</guid><description>&lt;h2 id="compile-time-vs-runtime-in-typescript"&gt;Compile-Time vs Runtime in TypeScript&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;TypeScript&lt;/em&gt; is an amazing technology, but it has been build under the assumption is compiles down to &lt;em&gt;JavaScript&lt;/em&gt;. As a consequence, all the wonderful types one can enjoy during the compile time, are completely gone during the runtime. Thus, it&amp;rsquo;s crucial to validate all the data from the IO.&lt;/p&gt;
&lt;p&gt;As the types doesn&amp;rsquo;t leave us any information about the data at the runtime, we usually end up maintaining two definitions of the same: (1) the class/interface for the typing purposes (2) JSON schema for validation purposes.&lt;/p&gt;
&lt;p&gt;There are many libraries/attempts to help with the problem, but my favourite is &lt;a href="https://ajv.js.org/"&gt;Ajv&lt;/a&gt;. Ajv can work as a standard JSON schema validation tool, but it has a superpower of making the &lt;a href="https://ajv.js.org/json-schema.html"&gt;JSON Schema&lt;/a&gt;/&lt;a href="https://ajv.js.org/json-type-definition.html"&gt;JSON Type Definition&lt;/a&gt; visible to TypeScript, i.e., from the JSON Schema/Type Def defined in the codebase, Ajv can transform that object into a TypeScript &lt;code&gt;type&lt;/code&gt; at the compile-time, e.g.:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-ts" data-lang="ts"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;import&lt;/span&gt; { &lt;span style="color:#a6e22e"&gt;JTDDataType&lt;/span&gt; } &lt;span style="color:#66d9ef"&gt;from&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;ajv/dist/jtd&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;FooSchema&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;properties&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;foo&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;type&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;string&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;} &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;const&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;type&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Foo&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;JTDDataType&lt;/span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;typeof&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;FooSchema&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;FooSchema&lt;/code&gt; definition can be used for the actual validation, and the &lt;code&gt;Foo&lt;/code&gt; is a type definition we can use in our codebase, thus we don&amp;rsquo;t need an additional &lt;code&gt;interface&lt;/code&gt;/&lt;code&gt;class&lt;/code&gt; re-definition.&lt;/p&gt;
&lt;h2 id="using-ajv-for-configuration-object"&gt;Using Ajv for Configuration Object&lt;/h2&gt;
&lt;p&gt;When writing a nodejs application, one of the first dynamically typed pieces of information to deal with is configuration. We either load from a file, environment or maybe a secrets manager, but it&amp;rsquo;s all guaranteed to be untyped by default.&lt;/p&gt;
&lt;p&gt;With Ajv, one can define a configuration schema, leverage that for validation purposes and use the magic of type transformation to get the typings for the schema.&lt;/p&gt;
&lt;p&gt;As there&amp;rsquo;s some boilerplate around reading files/environment, I ended up extracing that into a small, Ajv-based, library &lt;a href="https://github.com/albsadowski/config"&gt;@dumpstate/config&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;From now on, when I deal with configuration in nodejs, my code looks as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-ts" data-lang="ts"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;import&lt;/span&gt; { &lt;span style="color:#a6e22e"&gt;ConfigSchemaType&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;loadConfig&lt;/span&gt; } &lt;span style="color:#66d9ef"&gt;from&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;@dumpstate/config&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// NB I prefer JSON Type Definition
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;ConfigSchema&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;properties&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;app&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;properties&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;host&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; { &lt;span style="color:#66d9ef"&gt;type&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;string&amp;#34;&lt;/span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;port&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; { &lt;span style="color:#66d9ef"&gt;type&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;int32&amp;#34;&lt;/span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;} &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;const&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// NB ConfigSchemaType is just convenience proxy to JTDDataType from Ajv
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;type&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Config&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;ConfigSchemaType&lt;/span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;typeof&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;ConfigSchema&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// NB config is of `Config` type - both typed and validated
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;config&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;loadConfig&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;ConfigSchema&lt;/span&gt;, { &lt;span style="color:#a6e22e"&gt;appName&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;foo&amp;#34;&lt;/span&gt; })
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;loadConfig&lt;/code&gt; supports two configuration loaders (in the order of loading):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;file configuration loader:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;loads &lt;code&gt;config/default.application.json&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;loads &lt;code&gt;config/application.json&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;loads any file provided as &lt;code&gt;APPLICATION_CONFIG&lt;/code&gt; environment variable.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start="2"&gt;
&lt;li&gt;environment configuration loader:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;expects environment variables in the format e.g., &lt;code&gt;${appName}__APP__HOST&lt;/code&gt;, where the &lt;code&gt;appName&lt;/code&gt; is the name of the application passed to the &lt;code&gt;loadConfig&lt;/code&gt;, then all &lt;code&gt;.&lt;/code&gt; on the JSON path are transformed into &lt;code&gt;__&lt;/code&gt; and camel cased properties are snake cased.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="links"&gt;Links&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://ajv.js.org/"&gt;Ajv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/albsadowski/config"&gt;@dumpstate/config&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</description></item><item><title>Reader Monad for DB Connection in TypeScript</title><link>https://albsadowski.github.io/reader-monad-for-db-connection-in-typescript/</link><pubDate>Mon, 29 May 2023 00:00:00 +0000</pubDate><guid>https://albsadowski.github.io/reader-monad-for-db-connection-in-typescript/</guid><description>&lt;h2 id="mvcs"&gt;MVC(S)&lt;/h2&gt;
&lt;p&gt;The &lt;em&gt;Model-View-Controller&lt;/em&gt; is usually a standard pattern for building web applications. Whether the &lt;em&gt;view&lt;/em&gt; is expressed as HTML or perhaps just plain JSON, it helps to structure the application in an elegant way.&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;Model&lt;/em&gt; is a set of components responsible for representing the persistence layer, often in the form of some ORM classes. &lt;em&gt;View&lt;/em&gt; maintains the recipe for generating the &lt;em&gt;view&lt;/em&gt; given the &lt;em&gt;model&lt;/em&gt;. Finally &lt;em&gt;controller&lt;/em&gt; glues both parts together and deals with the other problems inherent in web development, such as parsing and interpreting query parameters.&lt;/p&gt;
&lt;p&gt;Where does the business logic live? As long as the application is trivial, the &lt;em&gt;model&lt;/em&gt; representation, combined with the power of ORMs, provides a powerful tool for manifesting the business domain. Then, the actual logic, either leaks to the &lt;em&gt;controller&lt;/em&gt; or requires another component in the MVC pattern.&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;service&lt;/em&gt; could be one of these components. The &lt;em&gt;service&lt;/em&gt; sits between the &lt;em&gt;controller&lt;/em&gt; and the &lt;em&gt;model&lt;/em&gt;, either by contructing higher level &lt;em&gt;model&lt;/em&gt; objects (non-ORM), or by simply enriching the ORM objects with an additional computation.&lt;/p&gt;
&lt;h2 id="acid"&gt;ACID&lt;/h2&gt;
&lt;p&gt;As the application grows, the &lt;em&gt;services&lt;/em&gt; become complex, often forming a hierarchy. Assuming there&amp;rsquo;s still a database-backed &lt;em&gt;model&lt;/em&gt; under the hood, all the &lt;em&gt;services&lt;/em&gt; do is run a sequence of database queries to either read or mutate the state of the system.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-ts" data-lang="ts"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;async&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;function&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;controllerMethod() {&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;res1&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;await&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;this&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;service1&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;this&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;service2&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;res1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;How can we ensure that a &lt;em&gt;controller&lt;/em&gt; calling one or more &lt;em&gt;services&lt;/em&gt;, maintains the &lt;em&gt;transation&lt;/em&gt; boundary? We need to make all the components aware of the current state of the transaction. The current transaction state is usually just an instance of a &lt;em&gt;database connection&lt;/em&gt;. And that&amp;rsquo;s the moment where an implementation &lt;em&gt;detail&lt;/em&gt; of the &lt;em&gt;model&lt;/em&gt; brutally leaks through the MVC(S) stack.&lt;/p&gt;
&lt;p&gt;If you want to make a &lt;em&gt;service&lt;/em&gt; transactional, it should accept a &lt;em&gt;database connection&lt;/em&gt; as a parameter on every method of a &lt;em&gt;service&lt;/em&gt;. This is inconvenient and tightly couples all of the web application code to a chosen database (+ probably a chosen ORM/similar).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-ts" data-lang="ts"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;async&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;function&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;controllerMethod() {&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;tr&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;await&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;dbPool&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;transact&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;try&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;res1&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;await&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;this&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;service1&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;tr&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;res2&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;await&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;this&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;service2&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;tr&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;res1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;await&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;tr&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;commit&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;res2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; } &lt;span style="color:#66d9ef"&gt;catch&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;await&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;tr&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;rollback&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Another way to solve this problem via the state of the &lt;em&gt;request&lt;/em&gt; - but the problem is equivalent - now we either inject the &lt;em&gt;request&lt;/em&gt; or couple application code with a chosen web framework.&lt;/p&gt;
&lt;p&gt;The approach suggested in this blog post is the &lt;em&gt;monad way&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id="the-monad-way"&gt;The Monad Way&lt;/h2&gt;
&lt;p&gt;The &lt;a href="https://hackage.haskell.org/package/mtl-2.3.1/docs/Control-Monad-Reader.html"&gt;&lt;em&gt;Reader monad&lt;/em&gt;&lt;/a&gt; is a well known pattern in the &lt;em&gt;Haskell&lt;/em&gt; community to solve the problem of a shared &lt;em&gt;environment&lt;/em&gt; between several components of the system.&lt;/p&gt;
&lt;p&gt;The idea is quite simple:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;do not require the &lt;em&gt;environment&lt;/em&gt; until you actually need it,&lt;/li&gt;
&lt;li&gt;use &lt;em&gt;monad&lt;/em&gt; properties to compose functions that depends on the &lt;em&gt;environment&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In our case, the &lt;em&gt;environment&lt;/em&gt; is a database connection - either raw connection, or a transaction.&lt;/p&gt;
&lt;p&gt;Point (1) above, is easier said than done, but in practice we can describe the whole computation process as a chain of lazily evaluated functions. Then, the final artefact should be a function that actually executes the program given the &lt;em&gt;environment&lt;/em&gt; (database connection).&lt;/p&gt;
&lt;p&gt;For &lt;em&gt;TypeScript&lt;/em&gt; I have extracted the boilerplate into &lt;a href="https://github.com/albsadowski/dbaction"&gt;&lt;em&gt;DBAction&lt;/em&gt;&lt;/a&gt; library, an example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-ts" data-lang="ts"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;async&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;function&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;controllerMethod() {&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;this&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;service1&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; .&lt;span style="color:#a6e22e"&gt;flatMap&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;res&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;this&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;service2&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;res&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; .&lt;span style="color:#a6e22e"&gt;transact&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;this&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;transactor&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s break this down:&lt;/p&gt;
&lt;h3 id="dbaction"&gt;DBAction&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;DBAction&lt;/em&gt; is an actual &lt;em&gt;reader monad&lt;/em&gt; for the database connection. What services return is not a &lt;code&gt;Promise&amp;lt;Result&amp;gt;&lt;/code&gt; type (a &lt;em&gt;promise&lt;/em&gt; of some kind of result), but &lt;code&gt;DBAction&amp;lt;Result&amp;gt;&lt;/code&gt;. After the service is called &lt;code&gt;this.service1()&lt;/code&gt;, nothing happens until we either &lt;code&gt;run&lt;/code&gt; or &lt;code&gt;transact&lt;/code&gt; the &lt;code&gt;DBAction&lt;/code&gt;. The value is referentially transparent, so if you call &lt;code&gt;this.service1&lt;/code&gt; with the same input, you&amp;rsquo;ll always get the same result.&lt;/p&gt;
&lt;p&gt;The cost of this approach, is that all the components involved in the chain, must return &lt;em&gt;DBActions&lt;/em&gt;. On the implementation side, this means that the moment you actually need the database connection, you should wrap it in a function that takes &lt;em&gt;database connection&lt;/em&gt; as its only argument and returns a &lt;em&gt;promise&lt;/em&gt; of some result type, e.g.:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-ts" data-lang="ts"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;service1&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;DBAction&lt;/span&gt;((&lt;span style="color:#a6e22e"&gt;conn&lt;/span&gt;) &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;conn&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;query&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;select...&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There are two methods available on the &lt;em&gt;DBAction&lt;/em&gt; that should help composing the monad:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;.map&amp;lt;K&amp;gt;(fn: (item: T) =&amp;gt; K)&lt;/code&gt; - mapping inner value into another value,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.flatMap&amp;lt;K&amp;gt;(fn: (item: T) =&amp;gt; DBAction&amp;lt;K&amp;gt;)&lt;/code&gt; - mapping inner value into another value, where the &lt;code&gt;fn&lt;/code&gt; function also require the &lt;em&gt;database connection&lt;/em&gt; for the computation.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The &lt;em&gt;DBAction&lt;/em&gt; can be:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;.run(tr: Transactor): Promise&amp;lt;T&amp;gt;&lt;/code&gt; - meaning the transactor will inject plain database connection into the chain,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.transact(tr: Transactor): Promise&amp;lt;T&amp;gt;&lt;/code&gt; - the transactor will start the transaction and then inject the connection into the chain, finally &lt;em&gt;commit&lt;/em&gt; or &lt;em&gt;rollback&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="transactor"&gt;Transactor&lt;/h3&gt;
&lt;p&gt;The &lt;em&gt;transactor&lt;/em&gt; is a component that knows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;the type of the database connection,&lt;/li&gt;
&lt;li&gt;the details of establishing the database connection, or requesting the connection from the pool,&lt;/li&gt;
&lt;li&gt;the details of executing the query and/or managing the transaction context.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The &lt;em&gt;transactor&lt;/em&gt; is database specific and depends on the database driver. There should be a single transactor for the entire application.&lt;/p&gt;
&lt;p&gt;As of now, &lt;em&gt;DBAction&lt;/em&gt; offers the one for &lt;em&gt;PostgreSQL&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-ts" data-lang="ts"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;import&lt;/span&gt; { &lt;span style="color:#a6e22e"&gt;Transactor&lt;/span&gt; } &lt;span style="color:#66d9ef"&gt;from&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;@dumpstate/dbaction/lib/PG&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// `pool` - an instance of `pg` connection pool
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;tr&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Transactor&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;pool&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="utilities"&gt;Utilities&lt;/h3&gt;
&lt;p&gt;The utilities available in the library, useful for composing the monad:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;flatten&lt;/code&gt; - tranforms an array of &lt;code&gt;DBAction&lt;/code&gt;s into a &lt;code&gt;DBAction&lt;/code&gt; of an array of values,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pure&lt;/code&gt; - wraps a scalar / promise / function returning a promise with a &lt;code&gt;DBAction&lt;/code&gt; - useful to lift non-&lt;em&gt;DBAction&lt;/em&gt; into a &lt;em&gt;DBAction&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;chain&lt;/code&gt; - builds a sequential chain of &lt;em&gt;DBActions&lt;/em&gt; - result of a previous is an argument for the latter,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sequence&lt;/code&gt; - runs operations concurrently; returns a single &lt;code&gt;DBAction&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;query&lt;/code&gt; - creates a &lt;em&gt;DBAction&lt;/em&gt; for a query string.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="links"&gt;Links&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/albsadowski/dbaction"&gt;&lt;em&gt;DBAction&lt;/em&gt; GitHub Repository&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackage.haskell.org/package/mtl-2.3.1/docs/Control-Monad-Reader.html"&gt;&lt;em&gt;Reader Monad&lt;/em&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Heavily inspired by &lt;a href="https://tpolecat.github.io/doobie/"&gt;&lt;em&gt;doobie&lt;/em&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;</description></item><item><title>Simple NLP Search</title><link>https://albsadowski.github.io/simple-nlp-search/</link><pubDate>Thu, 05 May 2016 23:29:33 +0000</pubDate><guid>https://albsadowski.github.io/simple-nlp-search/</guid><description>&lt;p&gt;Full text search is easy to use. But the inherent ambiguity of natural languages
causes search results to be biased with false positives. To obtain more accurate results, we need to change the approach and provide more domain specific data to the search engine.&lt;/p&gt;
&lt;p&gt;The most common and easiest to improve search results is to introduce filters, i.e. multiple input fields (text fields, radio buttons etc.) named after properties. This way we know how to shape the query and then return specific results. In combination with some approximate string matching algorithms, we may obtain very accurate search results. Unfortunately filters require forms with multiple fields at the cost of simple UX. (see &lt;em&gt;Figure 1&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;&lt;img src="./ebay-motors.png" alt="Figure 1"&gt;&lt;/p&gt;
&lt;p&gt;What if we&amp;rsquo;d like to stick to a single text field and still have accurate search results (see &lt;em&gt;Figure 2&lt;/em&gt;)? Surely one needs to employ natural language processing (NLP) tools. But everyone in the IT industry knows that NLP is hard to master and majority thinks it&amp;rsquo;s a highly academic approach. How can this be easily employed to improve search results over a specific domain?&lt;/p&gt;
&lt;p&gt;&lt;img src="./featured-image.png" alt="Figure 2"&gt;&lt;/p&gt;
&lt;h2 id="domain"&gt;Domain&lt;/h2&gt;
&lt;p&gt;Specificity of the domain is the key part of the approach. Machine learning algorithms are far from being ready to answer general questions. Even though the algorithms exist, they are far from our reach. For simplicity, we have to narrow the domain. Usually when we are in a need for introducing a search form, we operate within some area, i.e. finding a car at ebay.com we specify the type of the car, year of production, manufacturer, model etc..&lt;/p&gt;
&lt;p&gt;For the sake of this article, let&amp;rsquo;s take the domain of film screenings, i.e. tuple of: movie, theater and the date and time. We may also assume we know the geographical location of the theater and genre of the movie. We are going to query the film screening by title (or just genre), theater name (or just location) and date and time that the screening is going to happen - that is the data we need to collect from the user. Sample expressions we&amp;rsquo;d like to handle:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;the martian in san francisco tomorrow&lt;/em&gt; - query all theaters in San Francisco that will play &lt;em&gt;The Martian&lt;/em&gt; tomorrow,&lt;/li&gt;
&lt;li&gt;&lt;em&gt;the revenant in amc next week&lt;/em&gt; - query &lt;em&gt;AMC&lt;/em&gt; theater for all shows of &lt;em&gt;The Revenant&lt;/em&gt; that will occur next week,&lt;/li&gt;
&lt;li&gt;&lt;em&gt;cinemark next wednesday&lt;/em&gt; - query &lt;em&gt;Cinemark&lt;/em&gt; theaters for all the shows that will occur next Wednesday,&lt;/li&gt;
&lt;li&gt;&lt;em&gt;drama in san francisco on 11 June&lt;/em&gt; - query all theaters in San Francisco for a drama that will occur on 11th of June.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All expressions are transformed from natural language to a query of the form:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-scala" data-lang="scala"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;case&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Query&lt;/span&gt;&lt;span style="color:#f92672"&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; movie&lt;span style="color:#66d9ef"&gt;:&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;Option&lt;/span&gt;&lt;span style="color:#f92672"&gt;[&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;Either&lt;/span&gt;&lt;span style="color:#f92672"&gt;[&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;MovieName&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;MovieGenre&lt;/span&gt;&lt;span style="color:#f92672"&gt;]],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; theater&lt;span style="color:#66d9ef"&gt;:&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;Option&lt;/span&gt;&lt;span style="color:#f92672"&gt;[&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;Either&lt;/span&gt;&lt;span style="color:#f92672"&gt;[&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;TheaterName&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;TheaterLocation&lt;/span&gt;&lt;span style="color:#f92672"&gt;]]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; from&lt;span style="color:#66d9ef"&gt;:&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;Option&lt;/span&gt;&lt;span style="color:#f92672"&gt;[&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;DateTime&lt;/span&gt;&lt;span style="color:#f92672"&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; to&lt;span style="color:#66d9ef"&gt;:&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;Option&lt;/span&gt;&lt;span style="color:#f92672"&gt;[&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;DateTime&lt;/span&gt;&lt;span style="color:#f92672"&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;case&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;MovieName&lt;/span&gt;&lt;span style="color:#f92672"&gt;(&lt;/span&gt;value&lt;span style="color:#66d9ef"&gt;:&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;String&lt;/span&gt;&lt;span style="color:#f92672"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;case&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;MovieGenre&lt;/span&gt;&lt;span style="color:#f92672"&gt;(&lt;/span&gt;value&lt;span style="color:#66d9ef"&gt;:&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;String&lt;/span&gt;&lt;span style="color:#f92672"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;case&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;TheaterName&lt;/span&gt;&lt;span style="color:#f92672"&gt;(&lt;/span&gt;value&lt;span style="color:#66d9ef"&gt;:&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;String&lt;/span&gt;&lt;span style="color:#f92672"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;case&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;TheaterLocation&lt;/span&gt;&lt;span style="color:#f92672"&gt;(&lt;/span&gt;value&lt;span style="color:#66d9ef"&gt;:&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;String&lt;/span&gt;&lt;span style="color:#f92672"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="need-for-nlp"&gt;Need for NLP&lt;/h2&gt;
&lt;p&gt;It is hard to extract information from natural language. If we assume that there are just a few kinds of input statements, like &lt;code&gt;[MOVIE_NAME] in [THEATER_LOCATION] [TIME_EXPRESSION]&lt;/code&gt;, then it might be possible to program the parser for such statements explicitly. But even though someone manages to do this, such an algorithm would be unmaintainable. With NLP tools we may approach this problem without the need to program explicitly.&lt;/p&gt;
&lt;p&gt;Moreover, some statements are extremely similar in their structure, e.g.: &lt;code&gt;[MOVIE_NAME] [TIME_EXPRESSION]&lt;/code&gt; and &lt;code&gt;[THEATER_NAME] [TIME_EXPRESSION]&lt;/code&gt; - it is impossible to unambiguously differentiate both statements. NLP tools also care about the structure of &lt;code&gt;[MOVIE_NAME]&lt;/code&gt; and &lt;code&gt;[THEATER NAME]&lt;/code&gt;, then when extracting the information from statements it has more data to make a decision than the explicit parser.&lt;/p&gt;
&lt;h2 id="description-of-the-solution"&gt;Description of the solution&lt;/h2&gt;
&lt;p&gt;For our example the only subtask of information extraction we need is called &lt;em&gt;named entity recognition&lt;/em&gt;. Having the statement properly tagged we are able to compose our &lt;code&gt;Query&lt;/code&gt;. By tagging we mean assigning some domain specific meta information to each word from the statement, e.g.:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;the martian in san francisco tomorrow&lt;/em&gt; -&amp;gt; &lt;em&gt;(MOVIE_NAME: the martian) (PREPOSITION: in) (THEATER_LOCATION: san francisco) (TIME_EXPRESSION: tomorrow)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;amc next wednesday&lt;/em&gt; -&amp;gt; &lt;em&gt;(THEATER_NAME: amc) (TIME_EXPRESSION: next wednesday)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tools"&gt;Tools&lt;/h3&gt;
&lt;p&gt;When trying to tackle the problem, our first attempt was to try the &lt;a href="http://nlp.stanford.edu/software/CRF-NER.shtml"&gt;Stanford Named Entity Recognizer&lt;/a&gt;, which gave us stunning results, but unfortunately cannot be used commercially because of the GNU GPLv2 licensing.&lt;/p&gt;
&lt;p&gt;Finally we decided to use the &lt;a href="https://github.com/dlwh/epic"&gt;Epic&lt;/a&gt; library from &lt;a href="http://www.scalanlp.org/"&gt;ScalaNLP&lt;/a&gt; suite (all licensed under Apache 2.0). &lt;em&gt;Epic&lt;/em&gt; has many NLP algorithms implemented, but the downside we encountered is lack of the documentation thus it&amp;rsquo;s usage is far from straightforward.&lt;/p&gt;
&lt;h3 id="sample-data"&gt;Sample data&lt;/h3&gt;
&lt;p&gt;In order to train the Named Entity Recognizer (NER) we need to supply the algorithm with sample data. If we don&amp;rsquo;t have any real life data then we may generate some random statements based on possible schemas, like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[MOVIE_NAME] in [THEATER_LOCATION] [TIME_EXPRESSION]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[MOVIE_GENRE] [TIME_EXPRESSION] in [THEATER_LOCATION]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The format of the input depends on the library we use. The academic standard for describing the training data, &lt;a href="http://www.cnts.ua.ac.be/conll2003/ner/"&gt;CoNLL&lt;/a&gt;, covers much more than we need. Fortunately there is a way to simplify to just tagging, i.e.:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-txt" data-lang="txt"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;the MOVIE_NAME
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;martian MOVIE_NAME
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;in PREPOSITION
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;san THEATER_LOCATION
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;francisco THEATER_LOCATION
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;tomorrow TIME_EXPRESSION
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;comedy MOVIE_GENRE
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;thursday TIME_EXPRESSION
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;evening TIME_EXPRESSION
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;in PREPOSITION
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;san THEATER_LOCATION
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;francisco THEATER_LOCATION
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The optimal size of the training sample depends on the complexity of the domain and should be verified empirically.&lt;/p&gt;
&lt;p&gt;You can check the example at &lt;a href="https://github.com/evojam/simple-nlp-search-dataset-generator"&gt;GitHub&lt;/a&gt; how we generated sample data.&lt;/p&gt;
&lt;h3 id="training-ner"&gt;Training NER&lt;/h3&gt;
&lt;p&gt;We need to encode the relationships between the tagged statements and then construct some consistent interpretations for further reuse. Statistical tools that solves this problem are called &lt;em&gt;conditional random fields (CRFs)&lt;/em&gt;. In &lt;em&gt;ScalaNLP&lt;/em&gt; there are two implementations of CRF available. The first one &lt;code&gt;epic.sequences.CRF&lt;/code&gt; is the ordinary linear-chain CRF and the second one &lt;code&gt;epic.sequences.SemiCRF&lt;/code&gt; is an implementation of semi-Markov linear chain that should have better performance at small cost of accuracy.&lt;/p&gt;
&lt;h4 id="load-input-data-into-sequence-reader"&gt;Load input data into sequence reader&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;ScalaNLP&lt;/em&gt; has built-in parser for CoNLL data - &lt;code&gt;epic.corpora.CONLLSequenceReader&lt;/code&gt; which accepts the data input we proposed in section &lt;em&gt;Sample data&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-scala" data-lang="scala"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; sequenceReader &lt;span style="color:#66d9ef"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;CONLLSequenceReader&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;.&lt;/span&gt;readTrain&lt;span style="color:#f92672"&gt;(&lt;/span&gt;dataSetInputStream&lt;span style="color:#f92672"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;.&lt;/span&gt;toIndexedSeq
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id="apply-segmentation-function"&gt;Apply segmentation function&lt;/h4&gt;
&lt;p&gt;We train the CRF by transforming the input data to &lt;code&gt;epic.sequences.Segmentation[Any, String]&lt;/code&gt;. The segmentation is grouping the same tags in a row.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-scala" data-lang="scala"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;val&lt;/span&gt; seq &lt;span style="color:#66d9ef"&gt;=&lt;/span&gt; sequenceReader&lt;span style="color:#f92672"&gt;.&lt;/span&gt;map&lt;span style="color:#f92672"&gt;(&lt;/span&gt;segmentation&lt;span style="color:#f92672"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;the segmentation function we use:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-scala" data-lang="scala"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; segmentation&lt;span style="color:#f92672"&gt;(&lt;/span&gt;ex&lt;span style="color:#66d9ef"&gt;:&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;Example&lt;/span&gt;&lt;span style="color:#f92672"&gt;[&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;IndexedSeq&lt;/span&gt;&lt;span style="color:#f92672"&gt;[&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;String&lt;/span&gt;&lt;span style="color:#f92672"&gt;]&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;IndexedSeq&lt;/span&gt;&lt;span style="color:#f92672"&gt;[&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;IndexedSeq&lt;/span&gt;&lt;span style="color:#f92672"&gt;[&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;String&lt;/span&gt;&lt;span style="color:#f92672"&gt;]])&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;:&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;Segmentation&lt;/span&gt;&lt;span style="color:#f92672"&gt;[&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;Any&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;String&lt;/span&gt;&lt;span style="color:#f92672"&gt;]&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;=&lt;/span&gt; &lt;span style="color:#f92672"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;val&lt;/span&gt; segments &lt;span style="color:#66d9ef"&gt;=&lt;/span&gt; ex&lt;span style="color:#f92672"&gt;.&lt;/span&gt;label&lt;span style="color:#f92672"&gt;.&lt;/span&gt;foldLeft&lt;span style="color:#f92672"&gt;(&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;List&lt;/span&gt;&lt;span style="color:#f92672"&gt;.&lt;/span&gt;empty&lt;span style="color:#f92672"&gt;[(&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;String&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;Int&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;Int&lt;/span&gt;&lt;span style="color:#f92672"&gt;)]&lt;/span&gt; &lt;span style="color:#f92672"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;case&lt;/span&gt; &lt;span style="color:#f92672"&gt;(&lt;/span&gt;acc&lt;span style="color:#f92672"&gt;,&lt;/span&gt; label&lt;span style="color:#f92672"&gt;)&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;=&amp;gt;&lt;/span&gt; acc &lt;span style="color:#66d9ef"&gt;match&lt;/span&gt; &lt;span style="color:#f92672"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;case&lt;/span&gt; head &lt;span style="color:#66d9ef"&gt;:&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;:&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;tail&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; head &lt;span style="color:#66d9ef"&gt;match&lt;/span&gt; &lt;span style="color:#f92672"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;case&lt;/span&gt; &lt;span style="color:#f92672"&gt;(&lt;/span&gt;`label`&lt;span style="color:#f92672"&gt;,&lt;/span&gt; beg&lt;span style="color:#f92672"&gt;,&lt;/span&gt; end&lt;span style="color:#f92672"&gt;)&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;=&amp;gt;&lt;/span&gt; &lt;span style="color:#f92672"&gt;(&lt;/span&gt;label&lt;span style="color:#f92672"&gt;,&lt;/span&gt; beg&lt;span style="color:#f92672"&gt;,&lt;/span&gt; end &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;&lt;span style="color:#f92672"&gt;)&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;:&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;:&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;tail&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;case&lt;/span&gt; &lt;span style="color:#f92672"&gt;(&lt;/span&gt;nextLabel&lt;span style="color:#f92672"&gt;,&lt;/span&gt; beg&lt;span style="color:#f92672"&gt;,&lt;/span&gt; end&lt;span style="color:#f92672"&gt;)&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;=&amp;gt;&lt;/span&gt; &lt;span style="color:#f92672"&gt;(&lt;/span&gt;label&lt;span style="color:#f92672"&gt;,&lt;/span&gt; end&lt;span style="color:#f92672"&gt;,&lt;/span&gt; end &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;&lt;span style="color:#f92672"&gt;)&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;:&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;:&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;head&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;::&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;tail&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;case&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Nil&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;=&amp;gt;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;List&lt;/span&gt;&lt;span style="color:#f92672"&gt;((&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;String&lt;/span&gt;&lt;span style="color:#f92672"&gt;,&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;&lt;span style="color:#f92672"&gt;,&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;&lt;span style="color:#f92672"&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;val&lt;/span&gt; segmentsSeq &lt;span style="color:#66d9ef"&gt;=&lt;/span&gt; segments
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;.&lt;/span&gt;reverse&lt;span style="color:#f92672"&gt;.&lt;/span&gt;map &lt;span style="color:#f92672"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;case&lt;/span&gt; &lt;span style="color:#f92672"&gt;(&lt;/span&gt;label&lt;span style="color:#f92672"&gt;,&lt;/span&gt; beg&lt;span style="color:#f92672"&gt;,&lt;/span&gt; end&lt;span style="color:#f92672"&gt;)&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;=&amp;gt;&lt;/span&gt; &lt;span style="color:#f92672"&gt;(&lt;/span&gt;label&lt;span style="color:#f92672"&gt;,&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Span&lt;/span&gt;&lt;span style="color:#f92672"&gt;(&lt;/span&gt;beg&lt;span style="color:#f92672"&gt;,&lt;/span&gt; end&lt;span style="color:#f92672"&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;.&lt;/span&gt;toIndexedSeq
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Segmentation&lt;/span&gt;&lt;span style="color:#f92672"&gt;(&lt;/span&gt;segmentsSeq&lt;span style="color:#f92672"&gt;,&lt;/span&gt; ex&lt;span style="color:#f92672"&gt;.&lt;/span&gt;features&lt;span style="color:#f92672"&gt;.&lt;/span&gt;map&lt;span style="color:#f92672"&gt;(&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;_&lt;/span&gt;&lt;span style="color:#f92672"&gt;.&lt;/span&gt;mkString&lt;span style="color:#f92672"&gt;),&lt;/span&gt; ex&lt;span style="color:#f92672"&gt;.&lt;/span&gt;id&lt;span style="color:#f92672"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id="build-crf"&gt;Build CRF&lt;/h4&gt;
&lt;p&gt;having the input segmented, we can build the CRF:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-scala" data-lang="scala"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;val&lt;/span&gt; crf &lt;span style="color:#66d9ef"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;SemiCRF&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;.&lt;/span&gt;buildSimple&lt;span style="color:#f92672"&gt;(&lt;/span&gt;seq&lt;span style="color:#f92672"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;.&lt;/span&gt;asInstanceOf&lt;span style="color:#f92672"&gt;[&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;SemiCRF&lt;/span&gt;&lt;span style="color:#f92672"&gt;[&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;String&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;String&lt;/span&gt;&lt;span style="color:#f92672"&gt;]]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id="use-the-trained-crf-for-tagging-sequences"&gt;Use the trained &lt;code&gt;crf&lt;/code&gt; for tagging sequences&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-scala" data-lang="scala"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;val&lt;/span&gt; taggedSequence&lt;span style="color:#66d9ef"&gt;:&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;Segmentation&lt;/span&gt;&lt;span style="color:#f92672"&gt;[&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;String&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;String&lt;/span&gt;&lt;span style="color:#f92672"&gt;]&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;crf&lt;span style="color:#f92672"&gt;.&lt;/span&gt;bestSequence&lt;span style="color:#f92672"&gt;(&lt;/span&gt;epic&lt;span style="color:#f92672"&gt;.&lt;/span&gt;preprocess&lt;span style="color:#f92672"&gt;.&lt;/span&gt;tokenize&lt;span style="color:#f92672"&gt;(&lt;/span&gt;inputString&lt;span style="color:#f92672"&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;epic.preprocess.tokenize&lt;/code&gt; is just tokenizing by whitespace.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;Segmentation&lt;/code&gt; carries the tagged sequence. When we render a sample expression we get a string with tagged segments:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-txt" data-lang="txt"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;[MOVIE_NAME: the martian] [PREPOSITION: in] [THEATER_LOCATION: san francisco] [PREPOSITION: on] [TIME_EXPRESSION: 11th June 2016]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With such a tagging we are almost ready to construct the &lt;code&gt;Query&lt;/code&gt;. The only missing part are the &lt;code&gt;TIME_EXPRESSION&lt;/code&gt;s. We need explicit &lt;code&gt;from&lt;/code&gt; and &lt;code&gt;to&lt;/code&gt; parameters of type &lt;code&gt;DateTime&lt;/code&gt;. We may use &lt;a href="http://www.ocpsoft.org/prettytime/nlp/"&gt;PrettyTime::NLP&lt;/a&gt; to parse explicit time expressions, like: &lt;code&gt;11th June 2016&lt;/code&gt;, but if we want to obtain something more sophisticated, like &lt;code&gt;next Wed&lt;/code&gt; or &lt;code&gt;tomorrow&lt;/code&gt; we should employ the NLP approach again, i.e. training the CRF for time expressions.&lt;/p&gt;
&lt;p&gt;The results are pretty astonishing. The &lt;code&gt;crf&lt;/code&gt;, once trained, is working instantly. The accuracy of the interpretation will vary depending on the complexity of the domain and size of the training sample. In our case, we were surprised about the accuracy - even for ambiguous statements, the &lt;code&gt;crf&lt;/code&gt; was doing well.&lt;/p&gt;
&lt;p&gt;For the sample size of 200K input statements (generated with &lt;a href="https://github.com/evojam/simple-nlp-search-dataset-generator"&gt;simple-ner-search-dataset-generator&lt;/a&gt;, we&amp;rsquo;ve trained the NER with &lt;a href="https://github.com/evojam/ner-trainer"&gt;ner-trainer&lt;/a&gt;, and get the following results:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-txt" data-lang="txt"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;the martian in san francisco tomorrow
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;[MOVIE_NAME: the martian] [PREPOSITION: in] [THEATER_LOCATION: san francisco] [TIME_EXPRESSION: tomorrow] (in 8 ms)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;the revenant in amc next week
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;[MOVIE_NAME: the revenant] [PREPOSITION: in] [THEATER_NAME: amc] [TIME_EXPRESSION: next week] (in 15 ms)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cinemark next wednesday
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;[THEATER_NAME: cinemark] [TIME_EXPRESSION: next wednesday] (in 2 ms)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;drama in san francisco on 11 june
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;[MOVIE_GENRE: drama] [PREPOSITION: in] [THEATER_LOCATION: san francisco] [PREPOSITION: on] [TIME_EXPRESSION: 11 june] (in 4 ms)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;amc next wednesday
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;[THEATER_NAME: amc] [TIME_EXPRESSION: next wednesday] (in 2 ms)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;the martian in san francisco on 11th june 2016
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;[MOVIE_NAME: the martian] [PREPOSITION: in] [THEATER_LOCATION: san francisco] [PREPOSITION: on] [TIME_EXPRESSION: 11th june 2016] (in 8 ms)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can check this yourself in the interactive session by installing the &lt;a href="https://github.com/evojam/ner-trainer"&gt;ner-trainer&lt;/a&gt; and loading the serialized &lt;a href="https://www.dropbox.com/s/qfezeynlcegkfni/film-screenings.tar.gz?dl=0"&gt;example&lt;/a&gt; by calling &lt;code&gt;ner-trainer -l film-screenings.tar.gz&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id="tradeoffs"&gt;Tradeoffs&lt;/h3&gt;
&lt;p&gt;Unfortunately training the &lt;em&gt;CRF&lt;/em&gt; is extremely time consuming (measured in hours). There is a need to serialize the &lt;code&gt;SemiCRF&lt;/code&gt; object in order not to waste time. The serialization comes at the cost of taking care of binary compatibility. Also &lt;code&gt;SemiCRF&lt;/code&gt; might be a quite heavy object, so there comes the cost of additional memory.&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;Epic&lt;/em&gt; library is not easy to use. The documentation is not very helpful, and also lacks serious static typing. Even in this short example we were not able to avoid &lt;code&gt;asInstanceOf&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="conclusions"&gt;Conclusions&lt;/h2&gt;
&lt;p&gt;The libraries that are currently available nicely cover the hard parts of the problem. The tradeoffs are possible to overcome and many of them are relatively easy to fix, so probably will disappear in the future. Nevertheless it is possible to construct quite sophisticated NLP based search without drowning in complicated math. Even the newcomer should be able to implement the search in a matter of days.&lt;/p&gt;
&lt;h3 id="urls"&gt;URLs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ScalaNLP: &lt;a href="http://www.scalanlp.org/"&gt;http://www.scalanlp.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Stanford Named Entity Recognizer: &lt;a href="http://nlp.stanford.edu/software/CRF-NER.shtml"&gt;http://nlp.stanford.edu/software/CRF-NER.shtml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PrettyTime::NLP: &lt;a href="http://www.ocpsoft.org/prettytime/nlp/"&gt;http://www.ocpsoft.org/prettytime/nlp/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;NER Trainer: &lt;a href="https://github.com/evojam/ner-trainer"&gt;https://github.com/evojam/ner-trainer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Film Screenings Data Set Generator: &lt;a href="https://github.com/evojam/simple-nlp-search-dataset-generator"&gt;https://github.com/evojam/simple-nlp-search-dataset-generator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Sample &lt;a href="https://drive.google.com/file/d/0ByjmxsRtyWkLMWwxT2cyamJ1WUU/view?usp=sharing"&gt;serialized CRF for film screenings&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All of you feel invited to checkout and hack with NER trainer and data set generator on your domain. Please provide feedback in comments how this approach is working for you.&lt;/p&gt;
&lt;p&gt;This article was originally published on &lt;a href="http://tech.evojam.com"&gt;tech.evojam.com&lt;/a&gt; – there are many other interesting posts there!&lt;/p&gt;</description></item></channel></rss>